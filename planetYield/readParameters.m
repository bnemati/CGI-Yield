function out = TradeStudyParameters
%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\bnemati\Desktop\matlab SNR yield model\Trade-study-sensor-parameters_v3.xlsx
%    Worksheet: Sheet1
% file:///Z:/aftaim/AFTA_repo/trunk/modeling/SNR
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2015/09/11 16:54:03

%% Import the data
[~, ~, raw] = xlsread('./planetYield.xlsx','ParameterData','B3:Y16');
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
strData = raw(:,[1,2,3,4,6,7,8,22,23,24]);
numRawData = raw(:,[5,9:21]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),numRawData); % Find non-numeric cells
numRawData(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
numData = reshape([numRawData{:}],size(numRawData));

%% Allocate imported array to column variable names

[nr,nc]=size(numData);

k = 0;
for its = 1:nr
    if strcmp(strData(its,1),'Yes')
        k = k + 1;
        detCase(k).TradeStudy = strData(its,1);     %#ok<*AGROW>
        detCase(k).ShortName = strData(its,2);
        detCase(k).Mission = strData(its,3);
        detCase(k).Sensor = strData(its,4);
        detCase(k).pixelSize = numData(its,1) * 1e-6; % pixel size converted to meters
        detCase(k).FullFormatHxV = strData(its,5);
        detCase(k).Manufacturer = strData(its,6);
        detCase(k).TRL = strData{its,7};
        detCase(k).IDK_BOL = numData(its,2);
        detCase(k).IDK_EOL = numData(its,3);
        detCase(k).TempK = numData(its,4);
        detCase(k).RNerms = numData(its,5);
        detCase(k).Gain = numData(its,6);
        detCase(k).ENF = numData(its,7);
        detCase(k).CIC = numData(its,8);
        detCase(k).QE  = numData(its,9:13);
        detCase(k).QElam = [550,650,750,850,950]*1e-9;
        detCase(k).frameTime = numData(its,14);
        detCase(k).Variant = strData(its,8);
        detCase(k).ReferenceSource = strData(its,9);
        detCase(k).Comment = strData(its,10);
    end
end

out.detCase = detCase;

% Clear temporary variables
clearvars data raw cellVectors R;




%% Import the data
[~, ~, raw] = xlsread('./planetYield.xlsx','ScenarioDefinitions','A3:L9');
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[2,6,9,12]);
raw = raw(:,[1,3,4,5,7,8,10,11]);

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names
[nr, ~]=size(data);
k = 0;
for ir = 1:nr
    scen(ir).no = data(ir,1);
    scen(ir).ScenName = cellVectors{ir,1};
    scen(ir).centerWl = data(ir,2) * 1e-9;
    scen(ir).BW = data(ir,3);
    scen(ir).R = data(ir,4);
    scen(ir).Coronagraph = cellVectors{ir,2};
    scen(ir).MissionLife = data(ir,5);
    scen(ir).f_pp = data(ir,6);
    scen(ir).FPtype = cellVectors{ir,3};
    scen(ir).integTime= data(ir,7) * 3600;
    scen(ir).SNR = data(ir,8);
    scen(ir).Ctype = cellVectors{ir,4};
end

out.scen = scen;

%% Clear temporary variables
clearvars data raw cellVectors;


%% Import the data
[~, ~, raw] = xlsread('./planetYield.xlsx','QE','B3:I83');

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names

QE.wlen = data(:,1) * 1e-9;
QE.BasicMulti2DD = data(:,2);
QE.AstroMulti2DD = data(:,3);
QE.AstroMulti2stdSi = data(:,4);
QE.BasicMulti2stdSi = data(:,5);
QE.AstroMidbandDD = data(:,6);
QE.BasicNIRDD = data(:,7);
QE.BasicMidbandStdSi = data(:,8);

%% Clear temporary variables
clearvars data raw;

out.QE = QE;


%% the planet list from Savranski

[~, ~, raw] = xlsread('C:\Users\bnemati\Desktop\SNR\planetYield.xlsx','Planets','B5:Z40');
numRawData = cell2mat(raw(:,[1,3,4,6:20,24,25]));


planets.name = raw(:,2);
planets.Vmag = numRawData(:,2);
planets.dist_pc = numRawData(:,3);
planets.specType = raw(:,5);
planets.msini_Mjup = numRawData(:,4);
planets.sma_AU = numRawData(:,5);
planets.sep_as = numRawData(:,10);
planets.albedo_565nm_0deg = numRawData(:,14);
planets.albedo_565nm_65deg = numRawData(:,15);
planets.radius_Rjup = numRawData(:,20);

out.planets = planets;
return

